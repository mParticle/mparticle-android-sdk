name: "Daily Cron"

on:
  # Run daily at midnight
  schedule:
    - cron: "0 0 * * *"

  # Allow workflow to be manually run from the GitHub UI
  workflow_dispatch:

  # Allow workflow to be called from other files
  workflow_call:
    inputs:
      dry_run:
        description: "Do a dry run to preview instead of a real release [true/false]"
        required: false
        default: "true"
        type: string
      branch_name:
        description: "branch name to run tests on"
        required: false
        default: "development"
        type: string

jobs:
  confirm-public-repo:
    name: "Confirm android daily cron is run from public origin repo"
    runs-on: ubuntu-18.04
    steps:
      - name: "Cancel workflow"
        if: ${{ github.repository != 'mParticle/mparticle-android-sdk' }}
        uses: andymckay/cancel-action@0.2

  create-regression-branch:
    name: "Create Regression Branch"
    runs-on: ubuntu-18.04
    needs: confirm-public-repo
    env:
      GITHUB_TOKEN: ${{ secrets.MP_SEMANTIC_RELEASE_BOT }}
      GIT_AUTHOR_NAME: mparticle-automation
      GIT_AUTHOR_EMAIL: developers@mparticle.com
      GIT_COMMITTER_NAME: mparticle-automation
      GIT_COMMITTER_EMAIL: developers@mparticle.com
    steps:
      - name: "Clone branch"
        uses: actions/checkout@v2
        with:
          repository: mparticle/mparticle-android-sdk
          ref: ${{ inputs.branch_name }}
          submodules: recursive
      - name: "Create and push release branch"
        run: |
          git checkout -b regression/${{ github.run_number }}
          git push origin regression/${{ github.run_number }}
      - name: "Commit Kit Updates"
        run: |
          git submodule foreach "git fetch; git reset --hard origin/main";
          git add .
          git diff-index --quiet HEAD || git commit -m 'chore: Update Submodules'
      - name: "Push kit updates to release branch"
        run: git push origin regression/${{ github.run_number }}

  instrumented-tests:
    name: "Instrumented Tests"
    timeout-minutes: 30
    runs-on: macos-11
    needs: create-regression-branch
    steps:
      - name: "Checkout future release branch"
        uses: actions/checkout@v2
        with:
          repository: mparticle/mparticle-android-sdk
          ref: regression/${{ github.run_number }}
      - name: "Install JDK 11"
        uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "11"
      - name: "Run Instrumented Tests"
        uses: reactivecircus/android-emulator-runner@v2.20.0
        with:
          api-level: 29
          script: ./gradlew :android-core:cAT :android-kit-base:cAT --stacktrace
      - name: "Archive Instrumented Test Results"
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: instrumented-test-results
          path: android-core/build/reports/androidTests/connected/**

  unit-tests:
    name: "Unit Tests"
    timeout-minutes: 15
    runs-on: ubuntu-18.04
    needs: create-regression-branch
    steps:
      - name: "Checkout future release branch"
        uses: actions/checkout@v2
        with:
          repository: mparticle/mparticle-android-sdk
          ref: regression/${{ github.run_number }}
      - name: "Install JDK 11"
        uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "11"
      - name: "Run Unit Tests"
        run: ./gradlew test
      - name: "Print Android Unit Tests Report"
        uses: asadmansr/android-test-report-action@v1.2.0
        if: ${{ always() }}
      - name: "Archive Unit Test Results"
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: "unit-tests-results"
          path: ./**/build/reports/**
  lint-checks:
    name: "Lint Checks"
    timeout-minutes: 15
    runs-on: macos-11
    needs: create-regression-branch
    steps:
      - name: "Checkout Branch"
        uses: actions/checkout@v2
        with:
          ref: regression/${{ github.run_number }}
          submodules: recursive
      - name: "Install JDK 11"
        uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "11"
      - name: "Run Android Core SDK Lint"
        run: ./gradlew lint
      - name: "Setup Android Kit Lint"
        run: ./gradlew publishReleaseLocal
      - name: "Run Android Kit Lint"
        run: ./gradlew publishReleaseLocal -c settings-kits.gradle lint
      - name: "Archive Test Results"
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: "core-lint-results"
          path: ./**/build/reports/**
      - name: "Archive Test Kit Results"
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: "kit-lint-results"
          path: kits/**/build/reports/**

  update-kits:
    name: "Update Kits"
    needs: create-regression-branch
    runs-on: macos-11
    env:
      GIT_AUTHOR_NAME: mparticle-automation
      GIT_AUTHOR_EMAIL: developers@mparticle.com
      GIT_COMMITTER_NAME: mparticle-automation
      GIT_COMMITTER_EMAIL: developers@mparticle.com
    steps:
      - name: "Checkout future release branch"
        uses: actions/checkout@v2
        with:
          repository: mparticle/mparticle-android-sdk
          ref: regression/${{ github.run_number }}
          submodules: recursive
      - name: "Install JDK 11"
        uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "11"
      - name: "Build Android Core"
        run: ./gradlew -PisRelease=true clean publishReleaseLocal
      - name: "Test Kits"
        run: ./gradlew -PisRelease=true clean testRelease publishReleaseLocal -c settings-kits.gradle

  semantic-release:
    name: "Test Semantic Release - Dry Run"
    needs: [instrumented-tests, unit-tests, lint-checks, update-kits]
    runs-on: macos-11
    env:
      GITHUB_TOKEN: ${{ secrets.MP_SEMANTIC_RELEASE_BOT }}
      GIT_AUTHOR_NAME: mparticle-automation
      GIT_AUTHOR_EMAIL: developers@mparticle.com
      GIT_COMMITTER_NAME: mparticle-automation
      GIT_COMMITTER_EMAIL: developers@mparticle.com
    steps:
      - name: "Checkout public main branch"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: main
      - name: "Merge future release branch into main branch"
        run: |
          git pull origin regression/${{ github.run_number }}
      - name: "Semantic Release --dry-run"
        if: ${{ inputs.dryRun == 'true' }}
        run: |
          npx \
          -p lodash \
          -p semantic-release@17 \
          -p @semantic-release/changelog@5 \
          -p @semantic-release/git@9 \
          -p @semantic-release/exec@5 \
          semantic-release --dry-run

  sync-repository:
    name: "Delete regression branch"
    needs: semantic-release
    runs-on: ubuntu-18.04
    env:
      GITHUB_TOKEN: ${{ secrets.MP_SEMANTIC_RELEASE_BOT }}
      GIT_AUTHOR_NAME: mparticle-automation
      GIT_AUTHOR_EMAIL: developers@mparticle.com
      GIT_COMMITTER_NAME: mparticle-automation
      GIT_COMMITTER_EMAIL: developers@mparticle.com
    steps:
      - name: "Checkout main branch"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          repository: ${{ github.repository }}
          token: ${{ secrets.MP_SEMANTIC_RELEASE_BOT }}
          ref: ${{ inputs.branch_name }}
      - name: "Delete release branch"
        run: |
          git fetch origin regression/${{ github.run_number }}
          git push --delete origin regression/${{ github.run_number }}
