import proguard.gradle.ProGuardTask

apply plugin: 'java'
apply plugin: 'kotlin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.guardsquare:proguard-gradle:7.1.0'
    }
}


repositories {
    google()
    maven {
        url "https://mvnrepository.com/artifact/com.android.tools.lint/lint-tests"
    }
}

configurations {
    lintBuild
}

dependencies {
    lintBuild files(jar)
    compile files('libs/mparticle-min.jar')
    compile project(':tooling:common')
    compileOnly 'com.android.tools.lint:lint-api:26.5.3'
    compileOnly 'com.android.tools.lint:lint-checks:26.5.3'
    compileOnly 'org.codehaus.groovy:groovy-all:3.0.7'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.android.tools.lint:lint:26.5.3'
    testImplementation 'com.android.tools.lint:lint-tests:26.5.3'
    testImplementation 'com.android.tools:testutils:26.5.3'
    testImplementation 'org.easytesting:fest-assert-core:2.0M10'
}

jar {
    archiveName 'lint.jar'
    manifest {
        attributes 'Manifest-Version': 1.0
        attributes 'Lint-Registry-v2': 'com.mparticle.lints.MParticleIssueRegistry'
        attributes 'Lint-Registry': 'com.mparticle.lints.MParticleIssueRegistry'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

def targetBuildType = "release"
rootProject.project('android-core').android.buildTypes.all {
    def theBuildType = it.name
    if (rootProject.project('android-core').tasks.findByName("compile${theBuildType.capitalize()}JavaWithJavac")) {
        targetBuildType = theBuildType
    }
}

task zipSources(type: Jar) {
    def fileName = "$project.rootDir/android-core/build/intermediates/javac/${targetBuildType}/classes"
    from(fileTree(dir: fileName)) {
        destinationDir new File("$project.projectDir/libs")
        archiveName "mparticle.jar"
    }
    outputs.upToDateWhen { false }
}

task proguardCore(type: ProGuardTask) {
    configuration 'mparticle-core-proguard.pro'
    injars 'libs/mparticle.jar'
    outjars 'libs/mparticle-min.jar'
}

afterEvaluate {
    if (targetBuildType != null) {
        compileKotlin.dependsOn proguardCore
        proguardCore.dependsOn zipSources
        zipSources.dependsOn ":android-core:compile${targetBuildType.capitalize()}JavaWithJavac"
    }
}

beforeEvaluate {
    cleanTempLibraries
}

task cleanTempLibraries {
    File baseMParticle = file('libs/mparticle.jar')
    File minifiedMParticle = file('libs/mparticle-min.jar')
    if (baseMParticle.exists()) {
        baseMParticle.delete()
    }
    if (minifiedMParticle.exists()) {
        minifiedMParticle.delete()
    }
}

project.tasks.findByName("clean").dependsOn cleanTempLibraries