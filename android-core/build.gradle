ext {
    kitDescription = 'Core mParticle SDK supporting only server-side integrations.'
}

apply plugin: 'com.android.library'
apply from: '../scripts/maven.gradle'
apply plugin: 'kotlin-android'

android {
    compileSdk 30
    packagingOptions {
        exclude 'META-INF/LICENSE'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    String url = '\"\"'
    String identityUrl = '\"\"'
    String configurationUrl = '\"\"'
    try {
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        if (properties.stringPropertyNames().contains('mp.url')) {
            url = properties.getProperty('mp.url')
        }
        if (properties.stringPropertyNames().contains('mp.identityurl')) {
            identityUrl = properties.getProperty('mp.identityurl')
        }
        if (properties.stringPropertyNames().contains('mp.configurl')) {
            configurationUrl = properties.getProperty('mp.configurl')
        }
    } catch (Exception ignored) {

    }

    def gitHash = 'git rev-parse --short HEAD'.execute().text.trim()

    if (gitHash == null || gitHash.length() == 0) {
        gitHash = System.getenv('MP_GIT_SHA').substring(0, 7)
    }

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 30
        versionName project.version.toString().replace('-SNAPSHOT', '')
        versionCode Integer.parseInt(new Date().format('yyyyMMdd'))

        buildConfigField 'String', 'GIT_SHA', "\"$gitHash\""
        buildConfigField 'String', 'MP_URL', url
        buildConfigField 'String', 'MP_IDENTITY_URL', identityUrl
        buildConfigField 'String', 'MP_CONFIG_URL', configurationUrl
        buildConfigField 'Boolean', 'MP_DEBUG', 'false'
        buildConfigField 'String', 'SCHEME', '\"https\"'
        buildConfigField 'String', 'VERSION_NAME', '\"' + versionName + '\"'

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        if (useOrchestrator()) {
            testInstrumentationRunnerArgument 'clearPackageData', 'true'
            testInstrumentationRunnerArgument 'annotation', 'com.mparticle.OrchestratorOnly'
        } else {
            testInstrumentationRunnerArgument 'notAnnotation', 'com.mparticle.OrchestratorOnly'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            buildConfigField 'Boolean', 'MP_DEBUG', 'true'
        }
        release {
            minifyEnabled true
            proguardFiles 'proguard.pro'
            consumerProguardFiles 'consumer-proguard.pro'
            //buildConfigField 'Boolean', 'MP_DEBUG', 'true'
        }
    }
    testOptions {
        if (useOrchestrator()) {
            execution 'ANDROIDX_TEST_ORCHESTRATOR'
            reportDir buildDir.absolutePath + '/orchestrator-reports'
            resultsDir buildDir.absolutePath + '/orchestrator-results'
        }
    }
    lintOptions {
        enable 'UnknownNullness'
        checkDependencies = true
        abortOnError true
        lintConfig file('lint-baseline.xml')
    }
    sourceSets {
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

task coreSdkJavadocs(type: Javadoc) {
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            source = android.sourceSets.main.java.srcDirs
            source += 'build/generated/source/buildConfig/release/'
            owner.classpath += variant.javaCompileProvider.get().classpath
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
            classpath += project.files('src/main/java')
        }
        title = 'mParticle Android SDK API Reference'
        failOnError true
        getOptions().setNoTimestamp(true)
        exclude {
            String filePath = it.toString()
            filePath.contains('/com/mparticle/internal/') ||
                    filePath.contains('/com/mparticle/kits/')
        }
    }
}

task generateJavadocsJar(type: Jar, dependsOn: coreSdkJavadocs) {
    archiveClassifier.set('javadoc')
    from coreSdkJavadocs.destinationDir
}

task generateSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

dependencies {
    //noinspection GradleCompatible
    compileOnly 'com.google.firebase:firebase-messaging:[10.2.1, )'
    compileOnly 'com.android.installreferrer:installreferrer:[1.0, )'
    compileOnly 'com.google.android.instantapps:instantapps:[1.0, )'
    api 'androidx.annotation:annotation:[1.0.0,)'
    compileOnly 'androidx.core:core:[1.3.2, )'

    api 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'

    lintPublish project( path: ':tooling:custom-lint-rules', configuration: 'lintBuild')

    //the junit tests seem to explicitly need this dependency while
    //working in Android studio, but from the command line it's not necessary
    testImplementation project(':android-core')
    testImplementation 'junit:junit:4.13.2'
    testImplementation files('libs/java-json.jar')
    testImplementation 'org.powermock:powermock-module-junit4:2.0.7'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.2'
    testImplementation 'org.powermock:powermock-core:2.0.7'
    testImplementation project(':testutils')
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    androidTestImplementation project(':testutils')
    if (useOrchestrator()) {
        androidTestUtil 'androidx.test:orchestrator:1.3.0'
    }
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}


configurations {
    all {
        exclude module: "httpclient"
        exclude module: "commons-logging"
    }
}

afterEvaluate {
    android.buildTypes.all { theBuildType ->
        android.sourceSets.all { sourceSet ->
            if (!sourceSet.name.startsWith("test") && !sourceSet.name.startsWith("androidTest")) {
                sourceSet.kotlin.setSrcDirs([])
            }
        }
    }
}

boolean useOrchestrator() {
    return project.hasProperty('orchestrator') ? project.property('orchestrator') : false
}