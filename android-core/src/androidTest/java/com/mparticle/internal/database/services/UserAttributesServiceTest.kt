package com.mparticle.internal.database.services

import org.junit.Assert
import org.junit.Test
import java.lang.String
import kotlin.Boolean
import kotlin.random.Random

class UserAttributesServiceTest : BaseMPServiceTest() {
    @Test
    fun testStoreByMpid() {
        for (i in 0..19) {
            UserAttributesService.insertAttribute(
                database,
                String.valueOf(Random.Default.nextInt()),
                String.valueOf(Random.Default.nextInt()),
                System.currentTimeMillis(),
                false,
                3L
            )
        }
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                3L
            ).size.toLong(),
            20
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                4L
            ).size.toLong(),
            0
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                3L
            ).size.toLong(),
            0
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                4L
            ).size.toLong(),
            0
        )
        for (i in 0..29) {
            UserAttributesService.insertAttribute(
                database,
                String.valueOf(Random.Default.nextInt()),
                String.valueOf(Random.Default.nextInt()),
                System.currentTimeMillis(),
                false,
                4L
            )
        }
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                3L
            ).size.toLong(),
            20
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                4L
            ).size.toLong(),
            30
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                3L
            ).size.toLong(),
            0
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                4L
            ).size.toLong(),
            0
        )
        for (i in 0..14) {
            UserAttributesService.insertAttribute(
                database,
                String.valueOf(Random.Default.nextInt()),
                String.valueOf(Random.Default.nextInt()),
                System.currentTimeMillis(),
                true,
                3L
            )
        }
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                3L
            ).size.toLong(),
            20
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                4L
            ).size.toLong(),
            30
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                3L
            ).size.toLong(),
            15
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                4L
            ).size.toLong(),
            0
        )
        for (i in 0..29) {
            UserAttributesService.insertAttribute(
                database,
                String.valueOf(Random.Default.nextInt()),
                String.valueOf(Random.Default.nextInt()),
                System.currentTimeMillis(),
                true,
                5L
            )
        }
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                3L
            ).size.toLong(),
            20
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                4L
            ).size.toLong(),
            30
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                3L
            ).size.toLong(),
            15
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                4L
            ).size.toLong(),
            0
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                5L
            ).size.toLong(),
            30
        )
    }

    @Test
    fun testDeleteByMpid() {
        testDeleteByMpid(true)
    }

    private fun testDeleteByMpid(repeat: Boolean) {
        for (i in 0..2) {
            UserAttributesService.insertAttribute(
                database,
                "key$i",
                String.valueOf(Random.Default.nextInt()),
                System.currentTimeMillis(),
                false,
                2L
            )
        }
        for (i in 0..2) {
            UserAttributesService.insertAttribute(
                database,
                "key$i",
                String.valueOf(Random.Default.nextInt()),
                System.currentTimeMillis(),
                false,
                3L
            )
        }
        for (i in 3..5) {
            UserAttributesService.insertAttribute(
                database,
                "key$i",
                String.valueOf(Random.Default.nextInt()),
                System.currentTimeMillis(),
                true,
                2L
            )
        }
        for (i in 3..5) {
            UserAttributesService.insertAttribute(
                database,
                "key$i",
                String.valueOf(Random.Default.nextInt()),
                System.currentTimeMillis(),
                true,
                3L
            )
        }
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                2L
            ).size.toLong(),
            3
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                3L
            ).size.toLong(),
            3
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                2L
            ).size.toLong(),
            3
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                3L
            ).size.toLong(),
            3
        )
        UserAttributesService.deleteAttributes(database, "key1", 2L)
        UserAttributesService.deleteAttributes(database, "key4", 3L)
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                2L
            ).size.toLong(),
            2
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                3L
            ).size.toLong(),
            3
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                2L
            ).size.toLong(),
            3
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                3L
            ).size.toLong(),
            2
        )
        for (i in 0..5) {
            UserAttributesService.deleteAttributes(
                database,
                "key$i",
                2L
            )
        }
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                2L
            ).size.toLong(),
            0
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                3L
            ).size.toLong(),
            3
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                2L
            ).size.toLong(),
            0
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                3L
            ).size.toLong(),
            2
        )
        for (i in 0..5) {
            UserAttributesService.deleteAttributes(
                database,
                "key$i",
                3L
            )
        }
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                2L
            ).size.toLong(),
            0
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesSingles(
                database,
                3L
            ).size.toLong(),
            0
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                2L
            ).size.toLong(),
            0
        )
        Assert.assertEquals(
            UserAttributesService.getUserAttributesLists(
                database,
                3L
            ).size.toLong(),
            0
        )

        // easy way to test to make sure that insert is working properly after delete, just run the same test again
        if (repeat) {
            testDeleteByMpid(false)
        }
    }
}
